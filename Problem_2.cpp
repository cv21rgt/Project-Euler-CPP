/*
 * Problem: Each new term in the Fibbonacci sequence is generated by adding the previous two terms. 
 *          By starting with 1 and 2, the first 10 terms will be:
 *          1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *          By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
 *          the sum of the even-valued terms.
*/

#include <iostream>

int main()
{
    const long max_fib_n { 4000000 };

    // initialize variables to the starting values of Fibonacci sequence
    int y { 1 };
    int x { 2 };

    // temporary variable
    int temp { 0 };

    // 2 is our first even Fibonacci number so use that to initialize our
    // sum variable
    long sum { 2 };

    // initialize variable to hold a Fibonacci number 
    int fib_n { 0 };
    
    while (fib_n < max_fib_n)
    {
        // check if the Fibonacci number is an even number
        if (fib_n % 2 == 0)
            // add to our cumulative sum
            sum += fib_n;
        
        // generate the next Fibonacci number
        fib_n = x + y;
        
        // swap values
        temp = x;
        x = fib_n;
        y = temp;
    }

    std::cout << "Sum of even-valued terms of a Fibonacci sequence "
              << "whose values do not exceed 4 million = " 
              << sum << '\n';


    return 0;
}